# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: chirpstack-api/nc/nc.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import gw as _gw__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class MType(betterproto.Enum):
    UNKNOWN = 0
    JOIN_REQUEST = 1
    JOIN_ACCEPT = 2
    UNCONFIRMED_DATA_UP = 3
    UNCONFIRMED_DATA_DOWN = 4
    CONFIRMED_DATA_UP = 5
    CONFIRMED_DATA_DOWN = 6
    REJOIN_REQUEST = 7


@dataclass(eq=False, repr=False)
class HandleUplinkMetaDataRequest(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """Device EUI (8 bytes)."""

    tx_info: "_gw__.UplinkTxInfo" = betterproto.message_field(2)
    """TX meta-data."""

    rx_info: List["_gw__.UplinkRxInfo"] = betterproto.message_field(3)
    """RX meta-data."""

    phy_payload_byte_count: int = betterproto.uint32_field(4)
    """PHYPayload byte count."""

    mac_command_byte_count: int = betterproto.uint32_field(5)
    """MAC-Command byte count."""

    application_payload_byte_count: int = betterproto.uint32_field(6)
    """Application payload byte count."""

    message_type: "MType" = betterproto.enum_field(7)
    """Message type."""


@dataclass(eq=False, repr=False)
class HandleDownlinkMetaDataRequest(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """Device EUI (8 bytes)."""

    multicast_group_id: bytes = betterproto.bytes_field(2)
    """Multicast Group ID (UUID)."""

    tx_info: "_gw__.DownlinkTxInfo" = betterproto.message_field(3)
    """TX meta-data."""

    phy_payload_byte_count: int = betterproto.uint32_field(4)
    """PHYPayload byte count."""

    mac_command_byte_count: int = betterproto.uint32_field(5)
    """MAC-Command byte count."""

    application_payload_byte_count: int = betterproto.uint32_field(6)
    """Application payload byte count."""

    message_type: "MType" = betterproto.enum_field(7)
    """Message type."""

    gateway_id: bytes = betterproto.bytes_field(8)
    """Gateway ID."""


@dataclass(eq=False, repr=False)
class HandleUplinkMacCommandRequest(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """Device EUI (8 bytes)."""

    cid: int = betterproto.uint32_field(2)
    """Command identifier (specified by the LoRaWAN specs)."""

    commands: List[bytes] = betterproto.bytes_field(6)
    """MAC-command payload(s)."""


@dataclass(eq=False, repr=False)
class HandleRejectedUplinkFrameSetRequest(betterproto.Message):
    frame_set: "_gw__.UplinkFrameSet" = betterproto.message_field(1)


class NetworkControllerServiceStub(betterproto.ServiceStub):
    async def handle_uplink_meta_data(
        self,
        handle_uplink_meta_data_request: "HandleUplinkMetaDataRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/nc.NetworkControllerService/HandleUplinkMetaData",
            handle_uplink_meta_data_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def handle_downlink_meta_data(
        self,
        handle_downlink_meta_data_request: "HandleDownlinkMetaDataRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/nc.NetworkControllerService/HandleDownlinkMetaData",
            handle_downlink_meta_data_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def handle_uplink_mac_command(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/nc.NetworkControllerService/HandleUplinkMACCommand",
            handle_uplink_mac_command_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def handle_rejected_uplink_frame_set(
        self,
        handle_rejected_uplink_frame_set_request: "HandleRejectedUplinkFrameSetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/nc.NetworkControllerService/HandleRejectedUplinkFrameSet",
            handle_rejected_uplink_frame_set_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class NetworkControllerServiceBase(ServiceBase):
    async def handle_uplink_meta_data(
        self, handle_uplink_meta_data_request: "HandleUplinkMetaDataRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def handle_downlink_meta_data(
        self, handle_downlink_meta_data_request: "HandleDownlinkMetaDataRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def handle_uplink_mac_command(
        self,
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def handle_rejected_uplink_frame_set(
        self,
        handle_rejected_uplink_frame_set_request: "HandleRejectedUplinkFrameSetRequest",
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_handle_uplink_meta_data(
        self,
        stream: "grpclib.server.Stream[HandleUplinkMetaDataRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.handle_uplink_meta_data(request)
        await stream.send_message(response)

    async def __rpc_handle_downlink_meta_data(
        self,
        stream: "grpclib.server.Stream[HandleDownlinkMetaDataRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.handle_downlink_meta_data(request)
        await stream.send_message(response)

    async def __rpc_handle_uplink_mac_command(
        self,
        stream: "grpclib.server.Stream[HandleUplinkMacCommandRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.handle_uplink_mac_command(request)
        await stream.send_message(response)

    async def __rpc_handle_rejected_uplink_frame_set(
        self,
        stream: "grpclib.server.Stream[HandleRejectedUplinkFrameSetRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.handle_rejected_uplink_frame_set(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/nc.NetworkControllerService/HandleUplinkMetaData": grpclib.const.Handler(
                self.__rpc_handle_uplink_meta_data,
                grpclib.const.Cardinality.UNARY_UNARY,
                HandleUplinkMetaDataRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/nc.NetworkControllerService/HandleDownlinkMetaData": grpclib.const.Handler(
                self.__rpc_handle_downlink_meta_data,
                grpclib.const.Cardinality.UNARY_UNARY,
                HandleDownlinkMetaDataRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/nc.NetworkControllerService/HandleUplinkMACCommand": grpclib.const.Handler(
                self.__rpc_handle_uplink_mac_command,
                grpclib.const.Cardinality.UNARY_UNARY,
                HandleUplinkMacCommandRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/nc.NetworkControllerService/HandleRejectedUplinkFrameSet": grpclib.const.Handler(
                self.__rpc_handle_rejected_uplink_frame_set,
                grpclib.const.Cardinality.UNARY_UNARY,
                HandleRejectedUplinkFrameSetRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
        }
