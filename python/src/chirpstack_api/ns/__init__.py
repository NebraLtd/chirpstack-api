# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: chirpstack-api/ns/ns.proto, chirpstack-api/ns/profiles.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import (
    datetime,
    timedelta,
)
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import (
    common as _common__,
    gw as _gw__,
)


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class RatePolicy(betterproto.Enum):
    DROP = 0
    """Drop"""

    MARK = 1
    """Mark"""


class RxWindow(betterproto.Enum):
    RX1 = 0
    """Receive window 1"""

    RX2 = 1
    """Receive window 2"""


class AggregationInterval(betterproto.Enum):
    SECOND = 0
    MINUTE = 1
    HOUR = 2
    DAY = 3
    WEEK = 4
    MONTH = 5
    QUARTER = 6
    YEAR = 7


class MulticastGroupType(betterproto.Enum):
    CLASS_C = 0
    """Class-C."""

    CLASS_B = 1
    """Class-B."""


@dataclass(eq=False, repr=False)
class ServiceProfile(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """Service-profile ID."""

    ul_rate: int = betterproto.uint32_field(2)
    """Token bucket filling rate, including ACKs (packet/h)."""

    ul_bucket_size: int = betterproto.uint32_field(3)
    """Token bucket burst size."""

    ul_rate_policy: "RatePolicy" = betterproto.enum_field(4)
    """Drop or mark when exceeding ULRate."""

    dl_rate: int = betterproto.uint32_field(5)
    """Token bucket filling rate, including ACKs (packet/h)."""

    dl_bucket_size: int = betterproto.uint32_field(6)
    """Token bucket burst size."""

    dl_rate_policy: "RatePolicy" = betterproto.enum_field(7)
    """Drop or mark when exceeding DLRate."""

    add_gw_metadata: bool = betterproto.bool_field(8)
    """
    GW metadata (RSSI, SNR, GW geoloc., etc.) are added to the packet sent to
    AS.
    """

    dev_status_req_freq: int = betterproto.uint32_field(9)
    """Frequency to initiate an End-Device status request (request/day)."""

    report_dev_status_battery: bool = betterproto.bool_field(10)
    """Report End-Device battery level to AS."""

    report_dev_status_margin: bool = betterproto.bool_field(11)
    """Report End-Device margin to AS."""

    dr_min: int = betterproto.uint32_field(12)
    """Minimum allowed data rate. Used for ADR."""

    dr_max: int = betterproto.uint32_field(13)
    """Maximum allowed data rate. Used for ADR."""

    channel_mask: bytes = betterproto.bytes_field(14)
    """Channel mask. sNS does not have to obey (i.e., informative)."""

    pr_allowed: bool = betterproto.bool_field(15)
    """Passive Roaming allowed."""

    hr_allowed: bool = betterproto.bool_field(16)
    """Handover Roaming allowed."""

    ra_allowed: bool = betterproto.bool_field(17)
    """Roaming Activation allowed."""

    nwk_geo_loc: bool = betterproto.bool_field(18)
    """Enable network geolocation service."""

    target_per: int = betterproto.uint32_field(19)
    """Target Packet Error Rate."""

    min_gw_diversity: int = betterproto.uint32_field(20)
    """Minimum number of receiving GWs (informative)."""

    gws_private: bool = betterproto.bool_field(21)
    """
    Gateways under this service-profile are private. This means that these
    gateways can only be used by devices under the same service-profile.
    """


@dataclass(eq=False, repr=False)
class DeviceProfile(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """Device-profile ID."""

    supports_class_b: bool = betterproto.bool_field(2)
    """End-Device supports Class B."""

    class_b_timeout: int = betterproto.uint32_field(3)
    """
    Maximum delay for the End-Device to answer a MAC request or a confirmed DL
    frame (mandatory if class B mode supported).
    """

    ping_slot_period: int = betterproto.uint32_field(4)
    """Mandatory if class B mode supported."""

    ping_slot_dr: int = betterproto.uint32_field(5)
    """Mandatory if class B mode supported."""

    ping_slot_freq: int = betterproto.uint32_field(6)
    """Mandatory if class B mode supported."""

    supports_class_c: bool = betterproto.bool_field(7)
    """End-Device supports Class C."""

    class_c_timeout: int = betterproto.uint32_field(8)
    """
    Maximum delay for the End-Device to answer a MAC request or a confirmed DL
    frame (mandatory if class C mode supported).
    """

    mac_version: str = betterproto.string_field(9)
    """Version of the LoRaWAN supported by the End-Device."""

    reg_params_revision: str = betterproto.string_field(10)
    """
    Revision of the Regional Parameters document supported by the End-Device.
    """

    rx_delay_1: int = betterproto.uint32_field(11)
    """Class A RX1 delay (mandatory for ABP)."""

    rx_dr_offset_1: int = betterproto.uint32_field(12)
    """RX1 data rate offset (mandatory for ABP)."""

    rx_datarate_2: int = betterproto.uint32_field(13)
    """RX2 data rate (mandatory for ABP)."""

    rx_freq_2: int = betterproto.uint32_field(14)
    """RX2 channel frequency (mandatory for ABP)."""

    factory_preset_freqs: List[int] = betterproto.uint32_field(15)
    """List of factory-preset frequencies (mandatory for ABP)."""

    max_eirp: int = betterproto.uint32_field(16)
    """Maximum EIRP supported by the End-Device."""

    max_duty_cycle: int = betterproto.uint32_field(17)
    """Maximum duty cycle supported by the End-Device."""

    supports_join: bool = betterproto.bool_field(18)
    """End-Device supports Join (OTAA) or not (ABP)."""

    rf_region: str = betterproto.string_field(19)
    """RF region name."""

    supports_32_bit_f_cnt: bool = betterproto.bool_field(20)
    """End-Device uses 32bit FCnt (mandatory for LoRaWAN 1.0 End-Device)."""

    adr_algorithm_id: str = betterproto.string_field(21)
    """
    ADR algorithm ID. In case this is left blank, or is configured to a non-
    existing ADR algorithm (plugin), then it falls back to 'default'.
    """


@dataclass(eq=False, repr=False)
class RoutingProfile(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """ID of the routing profile."""

    as_id: str = betterproto.string_field(2)
    """Application-server ID."""

    ca_cert: str = betterproto.string_field(3)
    """CA certificate for connecting to the AS."""

    tls_cert: str = betterproto.string_field(4)
    """TLS certificate for connecting to the AS."""

    tls_key: str = betterproto.string_field(5)
    """
    TLS key for connecting to the AS. Note: when retrieving the routing-
    profile, the tls_key is not returned for security reasons. When updating
    the routing-profile, an empty tls_key does not clear the certificate,
    unless the tls_cert is also left blank.
    """


@dataclass(eq=False, repr=False)
class CreateServiceProfileRequest(betterproto.Message):
    service_profile: "ServiceProfile" = betterproto.message_field(1)
    """Service-profile object to create."""


@dataclass(eq=False, repr=False)
class CreateServiceProfileResponse(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """ID of the created service-profile."""


@dataclass(eq=False, repr=False)
class GetServiceProfileRequest(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """ID of the service-profile."""


@dataclass(eq=False, repr=False)
class GetServiceProfileResponse(betterproto.Message):
    service_profile: "ServiceProfile" = betterproto.message_field(1)
    """Service-profile object."""

    created_at: datetime = betterproto.message_field(2)
    """Created at timestamp."""

    updated_at: datetime = betterproto.message_field(3)
    """Last update timestamp."""


@dataclass(eq=False, repr=False)
class UpdateServiceProfileRequest(betterproto.Message):
    service_profile: "ServiceProfile" = betterproto.message_field(1)
    """Service-profile object to update."""


@dataclass(eq=False, repr=False)
class DeleteServiceProfileRequest(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """ID of the service-profile."""


@dataclass(eq=False, repr=False)
class CreateRoutingProfileRequest(betterproto.Message):
    routing_profile: "RoutingProfile" = betterproto.message_field(1)
    """Routing-profile object to create."""


@dataclass(eq=False, repr=False)
class CreateRoutingProfileResponse(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """ID of the created routing-profile."""


@dataclass(eq=False, repr=False)
class GetRoutingProfileRequest(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """ID of the routing-profile."""


@dataclass(eq=False, repr=False)
class GetRoutingProfileResponse(betterproto.Message):
    routing_profile: "RoutingProfile" = betterproto.message_field(1)
    """Routing-profile object."""

    created_at: datetime = betterproto.message_field(2)
    """Created at timestamp."""

    updated_at: datetime = betterproto.message_field(3)
    """Last update timestamp."""


@dataclass(eq=False, repr=False)
class UpdateRoutingProfileRequest(betterproto.Message):
    routing_profile: "RoutingProfile" = betterproto.message_field(1)
    """Routing-profile object to update."""


@dataclass(eq=False, repr=False)
class DeleteRoutingProfileRequest(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """Routing-profile ID."""


@dataclass(eq=False, repr=False)
class CreateDeviceProfileRequest(betterproto.Message):
    device_profile: "DeviceProfile" = betterproto.message_field(1)
    """Device-profile object to create."""


@dataclass(eq=False, repr=False)
class CreateDeviceProfileResponse(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """ID of the created device-profile."""


@dataclass(eq=False, repr=False)
class GetDeviceProfileRequest(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """Device-profile ID."""


@dataclass(eq=False, repr=False)
class GetDeviceProfileResponse(betterproto.Message):
    device_profile: "DeviceProfile" = betterproto.message_field(1)
    """Device-profile object."""

    created_at: datetime = betterproto.message_field(2)
    """Created at timestamp."""

    updated_at: datetime = betterproto.message_field(3)
    """Last update timestamp."""


@dataclass(eq=False, repr=False)
class UpdateDeviceProfileRequest(betterproto.Message):
    device_profile: "DeviceProfile" = betterproto.message_field(1)
    """Device-profile object to update."""


@dataclass(eq=False, repr=False)
class DeleteDeviceProfileRequest(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """Device-profile ID."""


@dataclass(eq=False, repr=False)
class Device(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """DevEUI."""

    device_profile_id: bytes = betterproto.bytes_field(2)
    """Device-profile ID."""

    service_profile_id: bytes = betterproto.bytes_field(3)
    """Service-profile ID."""

    routing_profile_id: bytes = betterproto.bytes_field(4)
    """Routing-profile ID."""

    skip_f_cnt_check: bool = betterproto.bool_field(5)
    """
    Skip frame-counter check. Note that turning this on is insecure and is
    intended for debugging only.
    """

    reference_altitude: float = betterproto.double_field(6)
    """
    Reference altitude. When using geolocation, this altitude will be used as a
    reference (when supported by the geolocation-server) to increase
    geolocation accuracy.
    """

    is_disabled: bool = betterproto.bool_field(7)
    """Device is disabled."""


@dataclass(eq=False, repr=False)
class CreateDeviceRequest(betterproto.Message):
    device: "Device" = betterproto.message_field(1)
    """Device object to create."""


@dataclass(eq=False, repr=False)
class GetDeviceRequest(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """DevEUI."""


@dataclass(eq=False, repr=False)
class GetDeviceResponse(betterproto.Message):
    device: "Device" = betterproto.message_field(1)
    """Device object."""

    created_at: datetime = betterproto.message_field(2)
    """Created at timestamp."""

    updated_at: datetime = betterproto.message_field(3)
    """Last update timestamp."""


@dataclass(eq=False, repr=False)
class UpdateDeviceRequest(betterproto.Message):
    device: "Device" = betterproto.message_field(1)
    """Device object to update."""


@dataclass(eq=False, repr=False)
class DeleteDeviceRequest(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """DevEUI."""


@dataclass(eq=False, repr=False)
class DeviceActivation(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """DevEUI."""

    dev_addr: bytes = betterproto.bytes_field(2)
    """Device address (DevAddr)."""

    s_nwk_s_int_key: bytes = betterproto.bytes_field(3)
    """SNwkSIntKey (serving network-server session integrity key)."""

    f_nwk_s_int_key: bytes = betterproto.bytes_field(4)
    """FNwkSIntKey (forwarding network-server session integrity key)."""

    nwk_s_enc_key: bytes = betterproto.bytes_field(5)
    """NwkSEncKey (network-server session encryption key)."""

    f_cnt_up: int = betterproto.uint32_field(6)
    """The next expected uplink frame-counter."""

    n_f_cnt_down: int = betterproto.uint32_field(7)
    """The network frame-counter used for the next downlink frame."""

    a_f_cnt_down: int = betterproto.uint32_field(8)
    """
    The application frame-counter used for the next downlink frame (LoRaWAN
    1.1).
    """

    skip_f_cnt_check: bool = betterproto.bool_field(9)
    """
    Skip frame-counter checks (this is insecure, but could be helpful for
    debugging).
    """


@dataclass(eq=False, repr=False)
class ActivateDeviceRequest(betterproto.Message):
    device_activation: "DeviceActivation" = betterproto.message_field(1)
    """Device-activation to activate a device (ABP)."""


@dataclass(eq=False, repr=False)
class DeactivateDeviceRequest(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """Device EUI (8 bytes)."""


@dataclass(eq=False, repr=False)
class GetDeviceActivationRequest(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """Device EUI (8 bytes)."""


@dataclass(eq=False, repr=False)
class GetDeviceActivationResponse(betterproto.Message):
    device_activation: "DeviceActivation" = betterproto.message_field(1)
    """Device-activation object."""


@dataclass(eq=False, repr=False)
class GetRandomDevAddrResponse(betterproto.Message):
    dev_addr: bytes = betterproto.bytes_field(1)
    """
    Random device address (DevAddr). Note that this includes the NetID prefix
    of the network-server.
    """


@dataclass(eq=False, repr=False)
class CreateMacCommandQueueItemRequest(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """DevEUI EUI (8 bytes)."""

    cid: int = betterproto.uint32_field(4)
    """Command identifier (specified by the LoRaWAN specs)."""

    commands: List[bytes] = betterproto.bytes_field(5)
    """
    MAC-command(s). In case multiple payloads are defined, then they are always
    sent within a single frame.
    """


@dataclass(eq=False, repr=False)
class SendProprietaryPayloadRequest(betterproto.Message):
    mac_payload: bytes = betterproto.bytes_field(1)
    """MACPayload of the proprietary LoRaWAN frame."""

    mic: bytes = betterproto.bytes_field(2)
    """MIC of the proprietary LoRaWAN frame (must be 4 bytes)."""

    gateway_macs: List[bytes] = betterproto.bytes_field(3)
    """Gateway MAC address(es) to use for transmitting the LoRaWAN frame."""

    polarization_inversion: bool = betterproto.bool_field(4)
    """
    Set to true for sending as a gateway, or false for sending as a node. In
    the latter case the frame will be received by other gateways.
    """

    frequency: int = betterproto.uint32_field(5)
    """Frequency (Hz) to use for the transmission."""

    dr: int = betterproto.uint32_field(6)
    """Data-rate to use for the transmission."""


@dataclass(eq=False, repr=False)
class Gateway(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """Gateway ID (8 bytes EUI64)."""

    location: "_common__.Location" = betterproto.message_field(2)
    """Gateway location."""

    gateway_profile_id: bytes = betterproto.bytes_field(3)
    """ID of the gateway-profile (optional)."""

    boards: List["GatewayBoard"] = betterproto.message_field(4)
    """
    Gateway boards configuration (optional). This is (currently) only needed
    when the gateway supports the fine-timestamp and you you would like to add
    the FPGA ID to the gateway meta-data or would like ChirpStack Network
    Server to decrypt the fine-timestamp.
    """

    routing_profile_id: bytes = betterproto.bytes_field(5)
    """
    Routing Profile ID. The routing-profile ID defines to which application-
    server statistical data for this gateway is forwarded.
    """

    service_profile_id: bytes = betterproto.bytes_field(6)
    """Service-profile ID (optional)."""


@dataclass(eq=False, repr=False)
class GatewayBoard(betterproto.Message):
    fpga_id: bytes = betterproto.bytes_field(1)
    """FPGA ID of the gateway (8 bytes) (optional)."""

    fine_timestamp_key: bytes = betterproto.bytes_field(2)
    """Fine-timestamp AES decryption key (16 bytes) (optional)."""


@dataclass(eq=False, repr=False)
class CreateGatewayRequest(betterproto.Message):
    gateway: "Gateway" = betterproto.message_field(1)
    """Gateway object to create."""


@dataclass(eq=False, repr=False)
class GetGatewayRequest(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """Gateway ID."""


@dataclass(eq=False, repr=False)
class GetGatewayResponse(betterproto.Message):
    gateway: "Gateway" = betterproto.message_field(1)
    """Gateway object."""

    created_at: datetime = betterproto.message_field(2)
    """Created at timestamp."""

    updated_at: datetime = betterproto.message_field(3)
    """Last update timestamp."""

    first_seen_at: datetime = betterproto.message_field(4)
    """First seen timestamp."""

    last_seen_at: datetime = betterproto.message_field(5)
    """Last seen timestamp."""


@dataclass(eq=False, repr=False)
class UpdateGatewayRequest(betterproto.Message):
    gateway: "Gateway" = betterproto.message_field(1)
    """Gateway object to update."""


@dataclass(eq=False, repr=False)
class DeleteGatewayRequest(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """Gateway ID."""


@dataclass(eq=False, repr=False)
class GenerateGatewayClientCertificateRequest(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """Gateway ID."""


@dataclass(eq=False, repr=False)
class GenerateGatewayClientCertificateResponse(betterproto.Message):
    tls_cert: bytes = betterproto.bytes_field(1)
    """TLS certificate."""

    tls_key: bytes = betterproto.bytes_field(2)
    """TLS key."""

    ca_cert: bytes = betterproto.bytes_field(3)
    """CA certificate."""

    expires_at: datetime = betterproto.message_field(4)
    """Expires at defines the expiration date of the certificate."""


@dataclass(eq=False, repr=False)
class GatewayStats(betterproto.Message):
    timestamp: datetime = betterproto.message_field(1)
    """Timestamp of the (aggregated) measurement."""

    rx_packets_received: int = betterproto.int32_field(2)
    """Packets received by the gateway."""

    rx_packets_received_ok: int = betterproto.int32_field(3)
    """Packets received by the gateway that passed the CRC check."""

    tx_packets_received: int = betterproto.int32_field(4)
    """Packets received by the gateway for transmission."""

    tx_packets_emitted: int = betterproto.int32_field(5)
    """Packets transmitted by the gateway."""


@dataclass(eq=False, repr=False)
class GetGatewayStatsRequest(betterproto.Message):
    gateway_id: bytes = betterproto.bytes_field(1)
    """MAC address of the gateway."""

    interval: "AggregationInterval" = betterproto.enum_field(2)
    """Aggregation interval."""

    start_timestamp: datetime = betterproto.message_field(3)
    """Timestamp to start from."""

    end_timestamp: datetime = betterproto.message_field(4)
    """Timestamp until to get from."""


@dataclass(eq=False, repr=False)
class GetGatewayStatsResponse(betterproto.Message):
    result: List["GatewayStats"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DeviceQueueItem(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """DevEUI of the device."""

    frm_payload: bytes = betterproto.bytes_field(2)
    """The encrypted FRMPayload bytes."""

    f_cnt: int = betterproto.uint32_field(3)
    """The FCnt of the payload."""

    f_port: int = betterproto.uint32_field(4)
    """The FPort of the payload."""

    confirmed: bool = betterproto.bool_field(5)
    """
    When set to true, ChirpStack Network Server will wait for the device to ack
    the received frame.
    """

    dev_addr: bytes = betterproto.bytes_field(6)
    """
    Device address (as known by the application-server). It will be used to
    validate that the application-server is using the correct security context
    of the device. As on OTAA, there is a gap between the activation and the
    delivery of the AppSKey to the application-server, there is a possibility
    that the application-server tries to enqueue payloads encrypted with the
    old session-key.
    """


@dataclass(eq=False, repr=False)
class CreateDeviceQueueItemRequest(betterproto.Message):
    item: "DeviceQueueItem" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class FlushDeviceQueueForDevEuiRequest(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """DevEUI of the device."""


@dataclass(eq=False, repr=False)
class GetDeviceQueueItemsForDevEuiRequest(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """DevEUI of the device."""

    count_only: bool = betterproto.bool_field(2)
    """Return only the count, not the result-set."""


@dataclass(eq=False, repr=False)
class GetDeviceQueueItemsForDevEuiResponse(betterproto.Message):
    items: List["DeviceQueueItem"] = betterproto.message_field(1)
    """The device queue items."""

    total_count: int = betterproto.uint32_field(2)
    """Total number of items in the queue."""


@dataclass(eq=False, repr=False)
class GetNextDownlinkFCntForDevEuiRequest(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """DevEUI of the device."""


@dataclass(eq=False, repr=False)
class GetNextDownlinkFCntForDevEuiResponse(betterproto.Message):
    f_cnt: int = betterproto.uint32_field(1)
    """The frame-counter to use."""


@dataclass(eq=False, repr=False)
class UplinkFrameLog(betterproto.Message):
    phy_payload: bytes = betterproto.bytes_field(1)
    """PHYPayload."""

    tx_info: "_gw__.UplinkTxInfo" = betterproto.message_field(2)
    """TX meta-data."""

    rx_info: List["_gw__.UplinkRxInfo"] = betterproto.message_field(3)
    """RX meta-data."""

    m_type: "_common__.MType" = betterproto.enum_field(4)
    """Message type."""

    dev_addr: bytes = betterproto.bytes_field(5)
    """Device address (optional)."""

    dev_eui: bytes = betterproto.bytes_field(6)
    """Device EUI (optional)."""

    published_at: datetime = betterproto.message_field(7)
    """Published at timestamp."""


@dataclass(eq=False, repr=False)
class DownlinkFrameLog(betterproto.Message):
    phy_payload: bytes = betterproto.bytes_field(1)
    """PHYPayload."""

    tx_info: "_gw__.DownlinkTxInfo" = betterproto.message_field(2)
    """TX meta-data."""

    token: int = betterproto.uint32_field(3)
    """Token (uint16 value). Deprecated: replaced by downlink_id."""

    downlink_id: bytes = betterproto.bytes_field(4)
    """Downlink ID (UUID)."""

    gateway_id: bytes = betterproto.bytes_field(5)
    """Gateway ID."""

    m_type: "_common__.MType" = betterproto.enum_field(6)
    """Message type."""

    dev_addr: bytes = betterproto.bytes_field(7)
    """Device address (optional)."""

    dev_eui: bytes = betterproto.bytes_field(8)
    """Device EUI (optional)."""

    published_at: datetime = betterproto.message_field(9)
    """Published at timestamp."""


@dataclass(eq=False, repr=False)
class StreamFrameLogsForGatewayRequest(betterproto.Message):
    gateway_id: bytes = betterproto.bytes_field(1)
    """MAC address of the gateway."""


@dataclass(eq=False, repr=False)
class StreamFrameLogsForGatewayResponse(betterproto.Message):
    uplink_frame_set: "UplinkFrameLog" = betterproto.message_field(1, group="frame")
    """Contains an uplink frame."""

    downlink_frame: "DownlinkFrameLog" = betterproto.message_field(2, group="frame")
    """Contains a downlink frame."""


@dataclass(eq=False, repr=False)
class StreamFrameLogsForDeviceRequest(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """DevEUI of the device."""


@dataclass(eq=False, repr=False)
class StreamFrameLogsForDeviceResponse(betterproto.Message):
    uplink_frame_set: "UplinkFrameLog" = betterproto.message_field(1, group="frame")
    """Contains an uplink frame."""

    downlink_frame: "DownlinkFrameLog" = betterproto.message_field(2, group="frame")
    """Contains a downlink frame."""


@dataclass(eq=False, repr=False)
class GetVersionResponse(betterproto.Message):
    version: str = betterproto.string_field(1)
    """ChirpStack Network Server version."""

    region: "_common__.Region" = betterproto.enum_field(2)
    """Region configured for this network-server."""


@dataclass(eq=False, repr=False)
class GatewayProfile(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """ID of the gateway-profile."""

    channels: List[int] = betterproto.uint32_field(2)
    """
    Default channels (channels specified by the LoRaWAN Regional Parameters
    specification) enabled for this configuration.
    """

    extra_channels: List["GatewayProfileExtraChannel"] = betterproto.message_field(3)
    """
    Extra channels added to the channel-configuration (in case the LoRaWAN
    region supports adding custom channels).
    """

    stats_interval: timedelta = betterproto.message_field(4)
    """
    Stats interval. This defines the (expected) stats interval which the
    gateways using this gateway-profile are using.
    """


@dataclass(eq=False, repr=False)
class GatewayProfileExtraChannel(betterproto.Message):
    modulation: "_common__.Modulation" = betterproto.enum_field(1)
    """Modulation."""

    frequency: int = betterproto.uint32_field(2)
    """Frequency."""

    bandwidth: int = betterproto.uint32_field(3)
    """Bandwidth."""

    bitrate: int = betterproto.uint32_field(4)
    """Bitrate (in case of FSK modulation)."""

    spreading_factors: List[int] = betterproto.uint32_field(5)
    """Spreading factors (in case of LoRa modulation)."""


@dataclass(eq=False, repr=False)
class CreateGatewayProfileRequest(betterproto.Message):
    gateway_profile: "GatewayProfile" = betterproto.message_field(1)
    """Gateway-profile object to create."""


@dataclass(eq=False, repr=False)
class CreateGatewayProfileResponse(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """ID of the create configuration object."""


@dataclass(eq=False, repr=False)
class GetGatewayProfileRequest(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """Gateway-profile ID."""


@dataclass(eq=False, repr=False)
class GetGatewayProfileResponse(betterproto.Message):
    gateway_profile: "GatewayProfile" = betterproto.message_field(1)
    """Gateway-profile object."""

    created_at: datetime = betterproto.message_field(2)
    """Created at timestamp."""

    updated_at: datetime = betterproto.message_field(3)
    """Last update timestamp."""


@dataclass(eq=False, repr=False)
class UpdateGatewayProfileRequest(betterproto.Message):
    gateway_profile: "GatewayProfile" = betterproto.message_field(1)
    """Gateway-profile object to update."""


@dataclass(eq=False, repr=False)
class DeleteGatewayProfileRequest(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """Gateway-profile ID."""


@dataclass(eq=False, repr=False)
class MulticastGroup(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """
    Multicast-group ID. Note: this can be set on create. When left blank, a
    random ID will be generated.
    """

    mc_addr: bytes = betterproto.bytes_field(2)
    """Multicast Address for this group."""

    mc_nwk_s_key: bytes = betterproto.bytes_field(3)
    """Multicast network session key."""

    f_cnt: int = betterproto.uint32_field(4)
    """Frame-counter (downlink)."""

    group_type: "MulticastGroupType" = betterproto.enum_field(5)
    """Multicast-group type (Class-B or Class-C)."""

    dr: int = betterproto.uint32_field(6)
    """Data-rate."""

    frequency: int = betterproto.uint32_field(7)
    """Frequency (Hz)."""

    ping_slot_period: int = betterproto.uint32_field(8)
    """Ping-slot period. Mandatory for Class-B multicast groups."""

    service_profile_id: bytes = betterproto.bytes_field(9)
    """Service-profile ID."""

    routing_profile_id: bytes = betterproto.bytes_field(10)
    """Routing-profile ID."""


@dataclass(eq=False, repr=False)
class CreateMulticastGroupRequest(betterproto.Message):
    multicast_group: "MulticastGroup" = betterproto.message_field(1)
    """Multicast-group to create."""


@dataclass(eq=False, repr=False)
class CreateMulticastGroupResponse(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """Multicast-group ID."""


@dataclass(eq=False, repr=False)
class GetMulticastGroupRequest(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """Multicast-group ID."""


@dataclass(eq=False, repr=False)
class GetMulticastGroupResponse(betterproto.Message):
    multicast_group: "MulticastGroup" = betterproto.message_field(1)
    """Multicast-group."""

    created_at: datetime = betterproto.message_field(2)
    """Created at timestamp."""

    updated_at: datetime = betterproto.message_field(3)
    """Last update timestamp."""


@dataclass(eq=False, repr=False)
class UpdateMulticastGroupRequest(betterproto.Message):
    multicast_group: "MulticastGroup" = betterproto.message_field(1)
    """Multicast-group to update."""


@dataclass(eq=False, repr=False)
class DeleteMulticastGroupRequest(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)
    """Multicast-group ID."""


@dataclass(eq=False, repr=False)
class AddDeviceToMulticastGroupRequest(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """Device EUI."""

    multicast_group_id: bytes = betterproto.bytes_field(2)
    """Multicast-group ID."""


@dataclass(eq=False, repr=False)
class RemoveDeviceFromMulticastGroupRequest(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """Device EUI."""

    multicast_group_id: bytes = betterproto.bytes_field(2)
    """Multicast-group ID."""


@dataclass(eq=False, repr=False)
class MulticastQueueItem(betterproto.Message):
    multicast_group_id: bytes = betterproto.bytes_field(1)
    """Multicast-group id."""

    f_cnt: int = betterproto.uint32_field(2)
    """Frame-counter of payload."""

    f_port: int = betterproto.uint32_field(3)
    """Frame-port of payload."""

    frm_payload: bytes = betterproto.bytes_field(4)
    """Encrypted FRMPayload bytes."""


@dataclass(eq=False, repr=False)
class EnqueueMulticastQueueItemRequest(betterproto.Message):
    multicast_queue_item: "MulticastQueueItem" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class FlushMulticastQueueForMulticastGroupRequest(betterproto.Message):
    multicast_group_id: bytes = betterproto.bytes_field(1)
    """Multicast-group id."""


@dataclass(eq=False, repr=False)
class GetMulticastQueueItemsForMulticastGroupRequest(betterproto.Message):
    multicast_group_id: bytes = betterproto.bytes_field(1)
    """Multicast-group id."""


@dataclass(eq=False, repr=False)
class GetMulticastQueueItemsForMulticastGroupResponse(betterproto.Message):
    multicast_queue_items: List["MulticastQueueItem"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetAdrAlgorithmsResponse(betterproto.Message):
    adr_algorithms: List["AdrAlgorithm"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AdrAlgorithm(betterproto.Message):
    id: str = betterproto.string_field(1)
    """ADR algorithm ID."""

    name: str = betterproto.string_field(2)
    """ADR algorithm name."""


@dataclass(eq=False, repr=False)
class ClearDeviceNoncesRequest(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """Device EUI (8 bytes)."""


class NetworkServerServiceStub(betterproto.ServiceStub):
    async def create_service_profile(
        self,
        create_service_profile_request: "CreateServiceProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateServiceProfileResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/CreateServiceProfile",
            create_service_profile_request,
            CreateServiceProfileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_service_profile(
        self,
        get_service_profile_request: "GetServiceProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetServiceProfileResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/GetServiceProfile",
            get_service_profile_request,
            GetServiceProfileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_service_profile(
        self,
        update_service_profile_request: "UpdateServiceProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/UpdateServiceProfile",
            update_service_profile_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_service_profile(
        self,
        delete_service_profile_request: "DeleteServiceProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/DeleteServiceProfile",
            delete_service_profile_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_routing_profile(
        self,
        create_routing_profile_request: "CreateRoutingProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateRoutingProfileResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/CreateRoutingProfile",
            create_routing_profile_request,
            CreateRoutingProfileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_routing_profile(
        self,
        get_routing_profile_request: "GetRoutingProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetRoutingProfileResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/GetRoutingProfile",
            get_routing_profile_request,
            GetRoutingProfileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_routing_profile(
        self,
        update_routing_profile_request: "UpdateRoutingProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/UpdateRoutingProfile",
            update_routing_profile_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_routing_profile(
        self,
        delete_routing_profile_request: "DeleteRoutingProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/DeleteRoutingProfile",
            delete_routing_profile_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_device_profile(
        self,
        create_device_profile_request: "CreateDeviceProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateDeviceProfileResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/CreateDeviceProfile",
            create_device_profile_request,
            CreateDeviceProfileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_device_profile(
        self,
        get_device_profile_request: "GetDeviceProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDeviceProfileResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/GetDeviceProfile",
            get_device_profile_request,
            GetDeviceProfileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_device_profile(
        self,
        update_device_profile_request: "UpdateDeviceProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/UpdateDeviceProfile",
            update_device_profile_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_device_profile(
        self,
        delete_device_profile_request: "DeleteDeviceProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/DeleteDeviceProfile",
            delete_device_profile_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_device(
        self,
        create_device_request: "CreateDeviceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/CreateDevice",
            create_device_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_device(
        self,
        get_device_request: "GetDeviceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDeviceResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/GetDevice",
            get_device_request,
            GetDeviceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_device(
        self,
        update_device_request: "UpdateDeviceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/UpdateDevice",
            update_device_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_device(
        self,
        delete_device_request: "DeleteDeviceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/DeleteDevice",
            delete_device_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def activate_device(
        self,
        activate_device_request: "ActivateDeviceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/ActivateDevice",
            activate_device_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deactivate_device(
        self,
        deactivate_device_request: "DeactivateDeviceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/DeactivateDevice",
            deactivate_device_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_device_activation(
        self,
        get_device_activation_request: "GetDeviceActivationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDeviceActivationResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/GetDeviceActivation",
            get_device_activation_request,
            GetDeviceActivationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_device_queue_item(
        self,
        create_device_queue_item_request: "CreateDeviceQueueItemRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/CreateDeviceQueueItem",
            create_device_queue_item_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def flush_device_queue_for_dev_eui(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/FlushDeviceQueueForDevEUI",
            flush_device_queue_for_dev_eui_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_device_queue_items_for_dev_eui(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDeviceQueueItemsForDevEuiResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/GetDeviceQueueItemsForDevEUI",
            get_device_queue_items_for_dev_eui_request,
            GetDeviceQueueItemsForDevEuiResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_next_downlink_f_cnt_for_dev_eui(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetNextDownlinkFCntForDevEuiResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/GetNextDownlinkFCntForDevEUI",
            get_next_downlink_f_cnt_for_dev_eui_request,
            GetNextDownlinkFCntForDevEuiResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_random_dev_addr(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetRandomDevAddrResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/GetRandomDevAddr",
            betterproto_lib_google_protobuf_empty,
            GetRandomDevAddrResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_mac_command_queue_item(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/CreateMACCommandQueueItem",
            create_mac_command_queue_item_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_proprietary_payload(
        self,
        send_proprietary_payload_request: "SendProprietaryPayloadRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/SendProprietaryPayload",
            send_proprietary_payload_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_gateway(
        self,
        create_gateway_request: "CreateGatewayRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/CreateGateway",
            create_gateway_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_gateway(
        self,
        get_gateway_request: "GetGatewayRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetGatewayResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/GetGateway",
            get_gateway_request,
            GetGatewayResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_gateway(
        self,
        update_gateway_request: "UpdateGatewayRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/UpdateGateway",
            update_gateway_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_gateway(
        self,
        delete_gateway_request: "DeleteGatewayRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/DeleteGateway",
            delete_gateway_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def generate_gateway_client_certificate(
        self,
        generate_gateway_client_certificate_request: "GenerateGatewayClientCertificateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GenerateGatewayClientCertificateResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/GenerateGatewayClientCertificate",
            generate_gateway_client_certificate_request,
            GenerateGatewayClientCertificateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_gateway_profile(
        self,
        create_gateway_profile_request: "CreateGatewayProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateGatewayProfileResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/CreateGatewayProfile",
            create_gateway_profile_request,
            CreateGatewayProfileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_gateway_profile(
        self,
        get_gateway_profile_request: "GetGatewayProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetGatewayProfileResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/GetGatewayProfile",
            get_gateway_profile_request,
            GetGatewayProfileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_gateway_profile(
        self,
        update_gateway_profile_request: "UpdateGatewayProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/UpdateGatewayProfile",
            update_gateway_profile_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_gateway_profile(
        self,
        delete_gateway_profile_request: "DeleteGatewayProfileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/DeleteGatewayProfile",
            delete_gateway_profile_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_gateway_stats(
        self,
        get_gateway_stats_request: "GetGatewayStatsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetGatewayStatsResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/GetGatewayStats",
            get_gateway_stats_request,
            GetGatewayStatsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stream_frame_logs_for_gateway(
        self,
        stream_frame_logs_for_gateway_request: "StreamFrameLogsForGatewayRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["StreamFrameLogsForGatewayResponse"]:
        async for response in self._unary_stream(
            "/ns.NetworkServerService/StreamFrameLogsForGateway",
            stream_frame_logs_for_gateway_request,
            StreamFrameLogsForGatewayResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def stream_frame_logs_for_device(
        self,
        stream_frame_logs_for_device_request: "StreamFrameLogsForDeviceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["StreamFrameLogsForDeviceResponse"]:
        async for response in self._unary_stream(
            "/ns.NetworkServerService/StreamFrameLogsForDevice",
            stream_frame_logs_for_device_request,
            StreamFrameLogsForDeviceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def create_multicast_group(
        self,
        create_multicast_group_request: "CreateMulticastGroupRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateMulticastGroupResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/CreateMulticastGroup",
            create_multicast_group_request,
            CreateMulticastGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_multicast_group(
        self,
        get_multicast_group_request: "GetMulticastGroupRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetMulticastGroupResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/GetMulticastGroup",
            get_multicast_group_request,
            GetMulticastGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_multicast_group(
        self,
        update_multicast_group_request: "UpdateMulticastGroupRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/UpdateMulticastGroup",
            update_multicast_group_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_multicast_group(
        self,
        delete_multicast_group_request: "DeleteMulticastGroupRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/DeleteMulticastGroup",
            delete_multicast_group_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_device_to_multicast_group(
        self,
        add_device_to_multicast_group_request: "AddDeviceToMulticastGroupRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/AddDeviceToMulticastGroup",
            add_device_to_multicast_group_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_device_from_multicast_group(
        self,
        remove_device_from_multicast_group_request: "RemoveDeviceFromMulticastGroupRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/RemoveDeviceFromMulticastGroup",
            remove_device_from_multicast_group_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def enqueue_multicast_queue_item(
        self,
        enqueue_multicast_queue_item_request: "EnqueueMulticastQueueItemRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/EnqueueMulticastQueueItem",
            enqueue_multicast_queue_item_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def flush_multicast_queue_for_multicast_group(
        self,
        flush_multicast_queue_for_multicast_group_request: "FlushMulticastQueueForMulticastGroupRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/FlushMulticastQueueForMulticastGroup",
            flush_multicast_queue_for_multicast_group_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_multicast_queue_items_for_multicast_group(
        self,
        get_multicast_queue_items_for_multicast_group_request: "GetMulticastQueueItemsForMulticastGroupRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetMulticastQueueItemsForMulticastGroupResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/GetMulticastQueueItemsForMulticastGroup",
            get_multicast_queue_items_for_multicast_group_request,
            GetMulticastQueueItemsForMulticastGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_version(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetVersionResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/GetVersion",
            betterproto_lib_google_protobuf_empty,
            GetVersionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_adr_algorithms(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetAdrAlgorithmsResponse":
        return await self._unary_unary(
            "/ns.NetworkServerService/GetADRAlgorithms",
            betterproto_lib_google_protobuf_empty,
            GetAdrAlgorithmsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def clear_device_nonces(
        self,
        clear_device_nonces_request: "ClearDeviceNoncesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/ns.NetworkServerService/ClearDeviceNonces",
            clear_device_nonces_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class NetworkServerServiceBase(ServiceBase):
    async def create_service_profile(
        self, create_service_profile_request: "CreateServiceProfileRequest"
    ) -> "CreateServiceProfileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_service_profile(
        self, get_service_profile_request: "GetServiceProfileRequest"
    ) -> "GetServiceProfileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_service_profile(
        self, update_service_profile_request: "UpdateServiceProfileRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_service_profile(
        self, delete_service_profile_request: "DeleteServiceProfileRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_routing_profile(
        self, create_routing_profile_request: "CreateRoutingProfileRequest"
    ) -> "CreateRoutingProfileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_routing_profile(
        self, get_routing_profile_request: "GetRoutingProfileRequest"
    ) -> "GetRoutingProfileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_routing_profile(
        self, update_routing_profile_request: "UpdateRoutingProfileRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_routing_profile(
        self, delete_routing_profile_request: "DeleteRoutingProfileRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_device_profile(
        self, create_device_profile_request: "CreateDeviceProfileRequest"
    ) -> "CreateDeviceProfileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_device_profile(
        self, get_device_profile_request: "GetDeviceProfileRequest"
    ) -> "GetDeviceProfileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_device_profile(
        self, update_device_profile_request: "UpdateDeviceProfileRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_device_profile(
        self, delete_device_profile_request: "DeleteDeviceProfileRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_device(
        self, create_device_request: "CreateDeviceRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_device(
        self, get_device_request: "GetDeviceRequest"
    ) -> "GetDeviceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_device(
        self, update_device_request: "UpdateDeviceRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_device(
        self, delete_device_request: "DeleteDeviceRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def activate_device(
        self, activate_device_request: "ActivateDeviceRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deactivate_device(
        self, deactivate_device_request: "DeactivateDeviceRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_device_activation(
        self, get_device_activation_request: "GetDeviceActivationRequest"
    ) -> "GetDeviceActivationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_device_queue_item(
        self, create_device_queue_item_request: "CreateDeviceQueueItemRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def flush_device_queue_for_dev_eui(
        self,
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_device_queue_items_for_dev_eui(
        self,
    ) -> "GetDeviceQueueItemsForDevEuiResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_next_downlink_f_cnt_for_dev_eui(
        self,
    ) -> "GetNextDownlinkFCntForDevEuiResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_random_dev_addr(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "GetRandomDevAddrResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_mac_command_queue_item(
        self,
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_proprietary_payload(
        self, send_proprietary_payload_request: "SendProprietaryPayloadRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_gateway(
        self, create_gateway_request: "CreateGatewayRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_gateway(
        self, get_gateway_request: "GetGatewayRequest"
    ) -> "GetGatewayResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_gateway(
        self, update_gateway_request: "UpdateGatewayRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_gateway(
        self, delete_gateway_request: "DeleteGatewayRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def generate_gateway_client_certificate(
        self,
        generate_gateway_client_certificate_request: "GenerateGatewayClientCertificateRequest",
    ) -> "GenerateGatewayClientCertificateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_gateway_profile(
        self, create_gateway_profile_request: "CreateGatewayProfileRequest"
    ) -> "CreateGatewayProfileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_gateway_profile(
        self, get_gateway_profile_request: "GetGatewayProfileRequest"
    ) -> "GetGatewayProfileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_gateway_profile(
        self, update_gateway_profile_request: "UpdateGatewayProfileRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_gateway_profile(
        self, delete_gateway_profile_request: "DeleteGatewayProfileRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_gateway_stats(
        self, get_gateway_stats_request: "GetGatewayStatsRequest"
    ) -> "GetGatewayStatsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stream_frame_logs_for_gateway(
        self, stream_frame_logs_for_gateway_request: "StreamFrameLogsForGatewayRequest"
    ) -> AsyncIterator["StreamFrameLogsForGatewayResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stream_frame_logs_for_device(
        self, stream_frame_logs_for_device_request: "StreamFrameLogsForDeviceRequest"
    ) -> AsyncIterator["StreamFrameLogsForDeviceResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_multicast_group(
        self, create_multicast_group_request: "CreateMulticastGroupRequest"
    ) -> "CreateMulticastGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_multicast_group(
        self, get_multicast_group_request: "GetMulticastGroupRequest"
    ) -> "GetMulticastGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_multicast_group(
        self, update_multicast_group_request: "UpdateMulticastGroupRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_multicast_group(
        self, delete_multicast_group_request: "DeleteMulticastGroupRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_device_to_multicast_group(
        self, add_device_to_multicast_group_request: "AddDeviceToMulticastGroupRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_device_from_multicast_group(
        self,
        remove_device_from_multicast_group_request: "RemoveDeviceFromMulticastGroupRequest",
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def enqueue_multicast_queue_item(
        self, enqueue_multicast_queue_item_request: "EnqueueMulticastQueueItemRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def flush_multicast_queue_for_multicast_group(
        self,
        flush_multicast_queue_for_multicast_group_request: "FlushMulticastQueueForMulticastGroupRequest",
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_multicast_queue_items_for_multicast_group(
        self,
        get_multicast_queue_items_for_multicast_group_request: "GetMulticastQueueItemsForMulticastGroupRequest",
    ) -> "GetMulticastQueueItemsForMulticastGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_version(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "GetVersionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_adr_algorithms(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "GetAdrAlgorithmsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def clear_device_nonces(
        self, clear_device_nonces_request: "ClearDeviceNoncesRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_service_profile(
        self,
        stream: "grpclib.server.Stream[CreateServiceProfileRequest, CreateServiceProfileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_service_profile(request)
        await stream.send_message(response)

    async def __rpc_get_service_profile(
        self,
        stream: "grpclib.server.Stream[GetServiceProfileRequest, GetServiceProfileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_service_profile(request)
        await stream.send_message(response)

    async def __rpc_update_service_profile(
        self,
        stream: "grpclib.server.Stream[UpdateServiceProfileRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_service_profile(request)
        await stream.send_message(response)

    async def __rpc_delete_service_profile(
        self,
        stream: "grpclib.server.Stream[DeleteServiceProfileRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_service_profile(request)
        await stream.send_message(response)

    async def __rpc_create_routing_profile(
        self,
        stream: "grpclib.server.Stream[CreateRoutingProfileRequest, CreateRoutingProfileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_routing_profile(request)
        await stream.send_message(response)

    async def __rpc_get_routing_profile(
        self,
        stream: "grpclib.server.Stream[GetRoutingProfileRequest, GetRoutingProfileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_routing_profile(request)
        await stream.send_message(response)

    async def __rpc_update_routing_profile(
        self,
        stream: "grpclib.server.Stream[UpdateRoutingProfileRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_routing_profile(request)
        await stream.send_message(response)

    async def __rpc_delete_routing_profile(
        self,
        stream: "grpclib.server.Stream[DeleteRoutingProfileRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_routing_profile(request)
        await stream.send_message(response)

    async def __rpc_create_device_profile(
        self,
        stream: "grpclib.server.Stream[CreateDeviceProfileRequest, CreateDeviceProfileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_device_profile(request)
        await stream.send_message(response)

    async def __rpc_get_device_profile(
        self,
        stream: "grpclib.server.Stream[GetDeviceProfileRequest, GetDeviceProfileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_device_profile(request)
        await stream.send_message(response)

    async def __rpc_update_device_profile(
        self,
        stream: "grpclib.server.Stream[UpdateDeviceProfileRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_device_profile(request)
        await stream.send_message(response)

    async def __rpc_delete_device_profile(
        self,
        stream: "grpclib.server.Stream[DeleteDeviceProfileRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_device_profile(request)
        await stream.send_message(response)

    async def __rpc_create_device(
        self,
        stream: "grpclib.server.Stream[CreateDeviceRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_device(request)
        await stream.send_message(response)

    async def __rpc_get_device(
        self, stream: "grpclib.server.Stream[GetDeviceRequest, GetDeviceResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_device(request)
        await stream.send_message(response)

    async def __rpc_update_device(
        self,
        stream: "grpclib.server.Stream[UpdateDeviceRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_device(request)
        await stream.send_message(response)

    async def __rpc_delete_device(
        self,
        stream: "grpclib.server.Stream[DeleteDeviceRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_device(request)
        await stream.send_message(response)

    async def __rpc_activate_device(
        self,
        stream: "grpclib.server.Stream[ActivateDeviceRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.activate_device(request)
        await stream.send_message(response)

    async def __rpc_deactivate_device(
        self,
        stream: "grpclib.server.Stream[DeactivateDeviceRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.deactivate_device(request)
        await stream.send_message(response)

    async def __rpc_get_device_activation(
        self,
        stream: "grpclib.server.Stream[GetDeviceActivationRequest, GetDeviceActivationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_device_activation(request)
        await stream.send_message(response)

    async def __rpc_create_device_queue_item(
        self,
        stream: "grpclib.server.Stream[CreateDeviceQueueItemRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_device_queue_item(request)
        await stream.send_message(response)

    async def __rpc_flush_device_queue_for_dev_eui(
        self,
        stream: "grpclib.server.Stream[FlushDeviceQueueForDevEuiRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.flush_device_queue_for_dev_eui(request)
        await stream.send_message(response)

    async def __rpc_get_device_queue_items_for_dev_eui(
        self,
        stream: "grpclib.server.Stream[GetDeviceQueueItemsForDevEuiRequest, GetDeviceQueueItemsForDevEuiResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_device_queue_items_for_dev_eui(request)
        await stream.send_message(response)

    async def __rpc_get_next_downlink_f_cnt_for_dev_eui(
        self,
        stream: "grpclib.server.Stream[GetNextDownlinkFCntForDevEuiRequest, GetNextDownlinkFCntForDevEuiResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_next_downlink_f_cnt_for_dev_eui(request)
        await stream.send_message(response)

    async def __rpc_get_random_dev_addr(
        self,
        stream: "grpclib.server.Stream[betterproto_lib_google_protobuf.Empty, GetRandomDevAddrResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_random_dev_addr(request)
        await stream.send_message(response)

    async def __rpc_create_mac_command_queue_item(
        self,
        stream: "grpclib.server.Stream[CreateMacCommandQueueItemRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_mac_command_queue_item(request)
        await stream.send_message(response)

    async def __rpc_send_proprietary_payload(
        self,
        stream: "grpclib.server.Stream[SendProprietaryPayloadRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.send_proprietary_payload(request)
        await stream.send_message(response)

    async def __rpc_create_gateway(
        self,
        stream: "grpclib.server.Stream[CreateGatewayRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_gateway(request)
        await stream.send_message(response)

    async def __rpc_get_gateway(
        self, stream: "grpclib.server.Stream[GetGatewayRequest, GetGatewayResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_gateway(request)
        await stream.send_message(response)

    async def __rpc_update_gateway(
        self,
        stream: "grpclib.server.Stream[UpdateGatewayRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_gateway(request)
        await stream.send_message(response)

    async def __rpc_delete_gateway(
        self,
        stream: "grpclib.server.Stream[DeleteGatewayRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_gateway(request)
        await stream.send_message(response)

    async def __rpc_generate_gateway_client_certificate(
        self,
        stream: "grpclib.server.Stream[GenerateGatewayClientCertificateRequest, GenerateGatewayClientCertificateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.generate_gateway_client_certificate(request)
        await stream.send_message(response)

    async def __rpc_create_gateway_profile(
        self,
        stream: "grpclib.server.Stream[CreateGatewayProfileRequest, CreateGatewayProfileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_gateway_profile(request)
        await stream.send_message(response)

    async def __rpc_get_gateway_profile(
        self,
        stream: "grpclib.server.Stream[GetGatewayProfileRequest, GetGatewayProfileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_gateway_profile(request)
        await stream.send_message(response)

    async def __rpc_update_gateway_profile(
        self,
        stream: "grpclib.server.Stream[UpdateGatewayProfileRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_gateway_profile(request)
        await stream.send_message(response)

    async def __rpc_delete_gateway_profile(
        self,
        stream: "grpclib.server.Stream[DeleteGatewayProfileRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_gateway_profile(request)
        await stream.send_message(response)

    async def __rpc_get_gateway_stats(
        self,
        stream: "grpclib.server.Stream[GetGatewayStatsRequest, GetGatewayStatsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_gateway_stats(request)
        await stream.send_message(response)

    async def __rpc_stream_frame_logs_for_gateway(
        self,
        stream: "grpclib.server.Stream[StreamFrameLogsForGatewayRequest, StreamFrameLogsForGatewayResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.stream_frame_logs_for_gateway,
            stream,
            request,
        )

    async def __rpc_stream_frame_logs_for_device(
        self,
        stream: "grpclib.server.Stream[StreamFrameLogsForDeviceRequest, StreamFrameLogsForDeviceResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.stream_frame_logs_for_device,
            stream,
            request,
        )

    async def __rpc_create_multicast_group(
        self,
        stream: "grpclib.server.Stream[CreateMulticastGroupRequest, CreateMulticastGroupResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_multicast_group(request)
        await stream.send_message(response)

    async def __rpc_get_multicast_group(
        self,
        stream: "grpclib.server.Stream[GetMulticastGroupRequest, GetMulticastGroupResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_multicast_group(request)
        await stream.send_message(response)

    async def __rpc_update_multicast_group(
        self,
        stream: "grpclib.server.Stream[UpdateMulticastGroupRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_multicast_group(request)
        await stream.send_message(response)

    async def __rpc_delete_multicast_group(
        self,
        stream: "grpclib.server.Stream[DeleteMulticastGroupRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_multicast_group(request)
        await stream.send_message(response)

    async def __rpc_add_device_to_multicast_group(
        self,
        stream: "grpclib.server.Stream[AddDeviceToMulticastGroupRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_device_to_multicast_group(request)
        await stream.send_message(response)

    async def __rpc_remove_device_from_multicast_group(
        self,
        stream: "grpclib.server.Stream[RemoveDeviceFromMulticastGroupRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_device_from_multicast_group(request)
        await stream.send_message(response)

    async def __rpc_enqueue_multicast_queue_item(
        self,
        stream: "grpclib.server.Stream[EnqueueMulticastQueueItemRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.enqueue_multicast_queue_item(request)
        await stream.send_message(response)

    async def __rpc_flush_multicast_queue_for_multicast_group(
        self,
        stream: "grpclib.server.Stream[FlushMulticastQueueForMulticastGroupRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.flush_multicast_queue_for_multicast_group(request)
        await stream.send_message(response)

    async def __rpc_get_multicast_queue_items_for_multicast_group(
        self,
        stream: "grpclib.server.Stream[GetMulticastQueueItemsForMulticastGroupRequest, GetMulticastQueueItemsForMulticastGroupResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_multicast_queue_items_for_multicast_group(request)
        await stream.send_message(response)

    async def __rpc_get_version(
        self,
        stream: "grpclib.server.Stream[betterproto_lib_google_protobuf.Empty, GetVersionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_version(request)
        await stream.send_message(response)

    async def __rpc_get_adr_algorithms(
        self,
        stream: "grpclib.server.Stream[betterproto_lib_google_protobuf.Empty, GetAdrAlgorithmsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_adr_algorithms(request)
        await stream.send_message(response)

    async def __rpc_clear_device_nonces(
        self,
        stream: "grpclib.server.Stream[ClearDeviceNoncesRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.clear_device_nonces(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/ns.NetworkServerService/CreateServiceProfile": grpclib.const.Handler(
                self.__rpc_create_service_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateServiceProfileRequest,
                CreateServiceProfileResponse,
            ),
            "/ns.NetworkServerService/GetServiceProfile": grpclib.const.Handler(
                self.__rpc_get_service_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetServiceProfileRequest,
                GetServiceProfileResponse,
            ),
            "/ns.NetworkServerService/UpdateServiceProfile": grpclib.const.Handler(
                self.__rpc_update_service_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateServiceProfileRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/DeleteServiceProfile": grpclib.const.Handler(
                self.__rpc_delete_service_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteServiceProfileRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/CreateRoutingProfile": grpclib.const.Handler(
                self.__rpc_create_routing_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateRoutingProfileRequest,
                CreateRoutingProfileResponse,
            ),
            "/ns.NetworkServerService/GetRoutingProfile": grpclib.const.Handler(
                self.__rpc_get_routing_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRoutingProfileRequest,
                GetRoutingProfileResponse,
            ),
            "/ns.NetworkServerService/UpdateRoutingProfile": grpclib.const.Handler(
                self.__rpc_update_routing_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateRoutingProfileRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/DeleteRoutingProfile": grpclib.const.Handler(
                self.__rpc_delete_routing_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteRoutingProfileRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/CreateDeviceProfile": grpclib.const.Handler(
                self.__rpc_create_device_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateDeviceProfileRequest,
                CreateDeviceProfileResponse,
            ),
            "/ns.NetworkServerService/GetDeviceProfile": grpclib.const.Handler(
                self.__rpc_get_device_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDeviceProfileRequest,
                GetDeviceProfileResponse,
            ),
            "/ns.NetworkServerService/UpdateDeviceProfile": grpclib.const.Handler(
                self.__rpc_update_device_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateDeviceProfileRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/DeleteDeviceProfile": grpclib.const.Handler(
                self.__rpc_delete_device_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteDeviceProfileRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/CreateDevice": grpclib.const.Handler(
                self.__rpc_create_device,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateDeviceRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/GetDevice": grpclib.const.Handler(
                self.__rpc_get_device,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDeviceRequest,
                GetDeviceResponse,
            ),
            "/ns.NetworkServerService/UpdateDevice": grpclib.const.Handler(
                self.__rpc_update_device,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateDeviceRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/DeleteDevice": grpclib.const.Handler(
                self.__rpc_delete_device,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteDeviceRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/ActivateDevice": grpclib.const.Handler(
                self.__rpc_activate_device,
                grpclib.const.Cardinality.UNARY_UNARY,
                ActivateDeviceRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/DeactivateDevice": grpclib.const.Handler(
                self.__rpc_deactivate_device,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeactivateDeviceRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/GetDeviceActivation": grpclib.const.Handler(
                self.__rpc_get_device_activation,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDeviceActivationRequest,
                GetDeviceActivationResponse,
            ),
            "/ns.NetworkServerService/CreateDeviceQueueItem": grpclib.const.Handler(
                self.__rpc_create_device_queue_item,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateDeviceQueueItemRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/FlushDeviceQueueForDevEUI": grpclib.const.Handler(
                self.__rpc_flush_device_queue_for_dev_eui,
                grpclib.const.Cardinality.UNARY_UNARY,
                FlushDeviceQueueForDevEuiRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/GetDeviceQueueItemsForDevEUI": grpclib.const.Handler(
                self.__rpc_get_device_queue_items_for_dev_eui,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDeviceQueueItemsForDevEuiRequest,
                GetDeviceQueueItemsForDevEuiResponse,
            ),
            "/ns.NetworkServerService/GetNextDownlinkFCntForDevEUI": grpclib.const.Handler(
                self.__rpc_get_next_downlink_f_cnt_for_dev_eui,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetNextDownlinkFCntForDevEuiRequest,
                GetNextDownlinkFCntForDevEuiResponse,
            ),
            "/ns.NetworkServerService/GetRandomDevAddr": grpclib.const.Handler(
                self.__rpc_get_random_dev_addr,
                grpclib.const.Cardinality.UNARY_UNARY,
                betterproto_lib_google_protobuf.Empty,
                GetRandomDevAddrResponse,
            ),
            "/ns.NetworkServerService/CreateMACCommandQueueItem": grpclib.const.Handler(
                self.__rpc_create_mac_command_queue_item,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateMacCommandQueueItemRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/SendProprietaryPayload": grpclib.const.Handler(
                self.__rpc_send_proprietary_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                SendProprietaryPayloadRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/CreateGateway": grpclib.const.Handler(
                self.__rpc_create_gateway,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateGatewayRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/GetGateway": grpclib.const.Handler(
                self.__rpc_get_gateway,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetGatewayRequest,
                GetGatewayResponse,
            ),
            "/ns.NetworkServerService/UpdateGateway": grpclib.const.Handler(
                self.__rpc_update_gateway,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateGatewayRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/DeleteGateway": grpclib.const.Handler(
                self.__rpc_delete_gateway,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteGatewayRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/GenerateGatewayClientCertificate": grpclib.const.Handler(
                self.__rpc_generate_gateway_client_certificate,
                grpclib.const.Cardinality.UNARY_UNARY,
                GenerateGatewayClientCertificateRequest,
                GenerateGatewayClientCertificateResponse,
            ),
            "/ns.NetworkServerService/CreateGatewayProfile": grpclib.const.Handler(
                self.__rpc_create_gateway_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateGatewayProfileRequest,
                CreateGatewayProfileResponse,
            ),
            "/ns.NetworkServerService/GetGatewayProfile": grpclib.const.Handler(
                self.__rpc_get_gateway_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetGatewayProfileRequest,
                GetGatewayProfileResponse,
            ),
            "/ns.NetworkServerService/UpdateGatewayProfile": grpclib.const.Handler(
                self.__rpc_update_gateway_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateGatewayProfileRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/DeleteGatewayProfile": grpclib.const.Handler(
                self.__rpc_delete_gateway_profile,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteGatewayProfileRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/GetGatewayStats": grpclib.const.Handler(
                self.__rpc_get_gateway_stats,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetGatewayStatsRequest,
                GetGatewayStatsResponse,
            ),
            "/ns.NetworkServerService/StreamFrameLogsForGateway": grpclib.const.Handler(
                self.__rpc_stream_frame_logs_for_gateway,
                grpclib.const.Cardinality.UNARY_STREAM,
                StreamFrameLogsForGatewayRequest,
                StreamFrameLogsForGatewayResponse,
            ),
            "/ns.NetworkServerService/StreamFrameLogsForDevice": grpclib.const.Handler(
                self.__rpc_stream_frame_logs_for_device,
                grpclib.const.Cardinality.UNARY_STREAM,
                StreamFrameLogsForDeviceRequest,
                StreamFrameLogsForDeviceResponse,
            ),
            "/ns.NetworkServerService/CreateMulticastGroup": grpclib.const.Handler(
                self.__rpc_create_multicast_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateMulticastGroupRequest,
                CreateMulticastGroupResponse,
            ),
            "/ns.NetworkServerService/GetMulticastGroup": grpclib.const.Handler(
                self.__rpc_get_multicast_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMulticastGroupRequest,
                GetMulticastGroupResponse,
            ),
            "/ns.NetworkServerService/UpdateMulticastGroup": grpclib.const.Handler(
                self.__rpc_update_multicast_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateMulticastGroupRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/DeleteMulticastGroup": grpclib.const.Handler(
                self.__rpc_delete_multicast_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteMulticastGroupRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/AddDeviceToMulticastGroup": grpclib.const.Handler(
                self.__rpc_add_device_to_multicast_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddDeviceToMulticastGroupRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/RemoveDeviceFromMulticastGroup": grpclib.const.Handler(
                self.__rpc_remove_device_from_multicast_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveDeviceFromMulticastGroupRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/EnqueueMulticastQueueItem": grpclib.const.Handler(
                self.__rpc_enqueue_multicast_queue_item,
                grpclib.const.Cardinality.UNARY_UNARY,
                EnqueueMulticastQueueItemRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/FlushMulticastQueueForMulticastGroup": grpclib.const.Handler(
                self.__rpc_flush_multicast_queue_for_multicast_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                FlushMulticastQueueForMulticastGroupRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/ns.NetworkServerService/GetMulticastQueueItemsForMulticastGroup": grpclib.const.Handler(
                self.__rpc_get_multicast_queue_items_for_multicast_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMulticastQueueItemsForMulticastGroupRequest,
                GetMulticastQueueItemsForMulticastGroupResponse,
            ),
            "/ns.NetworkServerService/GetVersion": grpclib.const.Handler(
                self.__rpc_get_version,
                grpclib.const.Cardinality.UNARY_UNARY,
                betterproto_lib_google_protobuf.Empty,
                GetVersionResponse,
            ),
            "/ns.NetworkServerService/GetADRAlgorithms": grpclib.const.Handler(
                self.__rpc_get_adr_algorithms,
                grpclib.const.Cardinality.UNARY_UNARY,
                betterproto_lib_google_protobuf.Empty,
                GetAdrAlgorithmsResponse,
            ),
            "/ns.NetworkServerService/ClearDeviceNonces": grpclib.const.Handler(
                self.__rpc_clear_device_nonces,
                grpclib.const.Cardinality.UNARY_UNARY,
                ClearDeviceNoncesRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
        }
