# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: chirpstack-api/geo/geo.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import (
    common as _common__,
    gw as _gw__,
)


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class ResolveResult(betterproto.Message):
    location: "_common__.Location" = betterproto.message_field(1)
    """Resolved location."""


@dataclass(eq=False, repr=False)
class FrameRxInfo(betterproto.Message):
    rx_info: List["_gw__.UplinkRxInfo"] = betterproto.message_field(1)
    """Uplink Gateway meta-data."""


@dataclass(eq=False, repr=False)
class ResolveTdoaRequest(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """Device ID."""

    frame_rx_info: "FrameRxInfo" = betterproto.message_field(2)
    """Frame meta-data."""

    device_reference_altitude: float = betterproto.double_field(3)
    """Device reference altitude."""


@dataclass(eq=False, repr=False)
class ResolveMultiFrameTdoaRequest(betterproto.Message):
    dev_eui: bytes = betterproto.bytes_field(1)
    """Device ID."""

    frame_rx_info_set: List["FrameRxInfo"] = betterproto.message_field(2)
    """Frames meta-data."""

    device_reference_altitude: float = betterproto.double_field(3)
    """Device reference altitude."""


@dataclass(eq=False, repr=False)
class ResolveTdoaResponse(betterproto.Message):
    result: "ResolveResult" = betterproto.message_field(1)
    """Resolve result."""


@dataclass(eq=False, repr=False)
class ResolveMultiFrameTdoaResponse(betterproto.Message):
    result: "ResolveResult" = betterproto.message_field(1)
    """Resolve result."""


class GeolocationServerServiceStub(betterproto.ServiceStub):
    async def resolve_tdoa(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ResolveTdoaResponse":
        return await self._unary_unary(
            "/geo.GeolocationServerService/ResolveTDOA",
            resolve_tdoa_request,
            ResolveTdoaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def resolve_multi_frame_tdoa(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ResolveMultiFrameTdoaResponse":
        return await self._unary_unary(
            "/geo.GeolocationServerService/ResolveMultiFrameTDOA",
            resolve_multi_frame_tdoa_request,
            ResolveMultiFrameTdoaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class GeolocationServerServiceBase(ServiceBase):
    async def resolve_tdoa(self) -> "ResolveTdoaResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def resolve_multi_frame_tdoa(self) -> "ResolveMultiFrameTdoaResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_resolve_tdoa(
        self, stream: "grpclib.server.Stream[ResolveTdoaRequest, ResolveTdoaResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.resolve_tdoa(request)
        await stream.send_message(response)

    async def __rpc_resolve_multi_frame_tdoa(
        self,
        stream: "grpclib.server.Stream[ResolveMultiFrameTdoaRequest, ResolveMultiFrameTdoaResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.resolve_multi_frame_tdoa(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/geo.GeolocationServerService/ResolveTDOA": grpclib.const.Handler(
                self.__rpc_resolve_tdoa,
                grpclib.const.Cardinality.UNARY_UNARY,
                ResolveTdoaRequest,
                ResolveTdoaResponse,
            ),
            "/geo.GeolocationServerService/ResolveMultiFrameTDOA": grpclib.const.Handler(
                self.__rpc_resolve_multi_frame_tdoa,
                grpclib.const.Cardinality.UNARY_UNARY,
                ResolveMultiFrameTdoaRequest,
                ResolveMultiFrameTdoaResponse,
            ),
        }
