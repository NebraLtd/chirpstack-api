# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: chirpstack-api/as_pb/external/api/user.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class User(betterproto.Message):
    id: int = betterproto.int64_field(1)
    """User ID. Will be set automatically on create."""

    session_ttl: int = betterproto.int32_field(3)
    """The session timeout, in minutes."""

    is_admin: bool = betterproto.bool_field(4)
    """Set to true to make the user a global administrator."""

    is_active: bool = betterproto.bool_field(5)
    """Set to false to disable the user."""

    email: str = betterproto.string_field(6)
    """E-mail of the user."""

    note: str = betterproto.string_field(7)
    """Optional note to store with the user."""


@dataclass(eq=False, repr=False)
class UserListItem(betterproto.Message):
    id: int = betterproto.int64_field(1)
    """User ID. Will be set automatically on create."""

    email: str = betterproto.string_field(2)
    """Email of the user."""

    session_ttl: int = betterproto.int32_field(3)
    """The session timeout, in minutes."""

    is_admin: bool = betterproto.bool_field(4)
    """Set to true to make the user a global administrator."""

    is_active: bool = betterproto.bool_field(5)
    """Set to false to disable the user."""

    created_at: datetime = betterproto.message_field(8)
    """Created at timestamp."""

    updated_at: datetime = betterproto.message_field(9)
    """Last update timestamp."""


@dataclass(eq=False, repr=False)
class UserOrganization(betterproto.Message):
    organization_id: int = betterproto.int64_field(1)
    """Organization ID."""

    is_admin: bool = betterproto.bool_field(2)
    """
    User is admin within the context of the organization. There is no need to
    set the is_device_admin and is_gateway_admin flags.
    """

    is_device_admin: bool = betterproto.bool_field(3)
    """
    User is able to modify device related resources (applications, device-
    profiles, devices, multicast-groups).
    """

    is_gateway_admin: bool = betterproto.bool_field(4)
    """User is able to modify gateways."""


@dataclass(eq=False, repr=False)
class CreateUserRequest(betterproto.Message):
    user: "User" = betterproto.message_field(1)
    """User object to create."""

    password: str = betterproto.string_field(2)
    """Password of the user."""

    organizations: List["UserOrganization"] = betterproto.message_field(3)
    """Add the user to the following organizations."""


@dataclass(eq=False, repr=False)
class CreateUserResponse(betterproto.Message):
    id: int = betterproto.int64_field(1)
    """User ID."""


@dataclass(eq=False, repr=False)
class GetUserRequest(betterproto.Message):
    id: int = betterproto.int64_field(1)
    """User ID."""


@dataclass(eq=False, repr=False)
class GetUserResponse(betterproto.Message):
    user: "User" = betterproto.message_field(1)
    """User object."""

    created_at: datetime = betterproto.message_field(2)
    """Created at timestamp."""

    updated_at: datetime = betterproto.message_field(3)
    """Last update timestamp."""


@dataclass(eq=False, repr=False)
class UpdateUserRequest(betterproto.Message):
    user: "User" = betterproto.message_field(1)
    """User object to update."""


@dataclass(eq=False, repr=False)
class DeleteUserRequest(betterproto.Message):
    id: int = betterproto.int64_field(1)
    """User ID."""


@dataclass(eq=False, repr=False)
class ListUserRequest(betterproto.Message):
    limit: int = betterproto.int64_field(1)
    """Max number of user to return in the result-set."""

    offset: int = betterproto.int64_field(2)
    """Offset in the result-set (for pagination)."""


@dataclass(eq=False, repr=False)
class ListUserResponse(betterproto.Message):
    total_count: int = betterproto.int64_field(1)
    """Total number of users."""

    result: List["UserListItem"] = betterproto.message_field(2)
    """Result-set."""


@dataclass(eq=False, repr=False)
class UpdateUserPasswordRequest(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    """User ID."""

    password: str = betterproto.string_field(2)
    """New pasword."""


class UserServiceStub(betterproto.ServiceStub):
    async def list(
        self,
        list_user_request: "ListUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListUserResponse":
        return await self._unary_unary(
            "/api.UserService/List",
            list_user_request,
            ListUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get(
        self,
        get_user_request: "GetUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetUserResponse":
        return await self._unary_unary(
            "/api.UserService/Get",
            get_user_request,
            GetUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create(
        self,
        create_user_request: "CreateUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateUserResponse":
        return await self._unary_unary(
            "/api.UserService/Create",
            create_user_request,
            CreateUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update(
        self,
        update_user_request: "UpdateUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/api.UserService/Update",
            update_user_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete(
        self,
        delete_user_request: "DeleteUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/api.UserService/Delete",
            delete_user_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_password(
        self,
        update_user_password_request: "UpdateUserPasswordRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/api.UserService/UpdatePassword",
            update_user_password_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class UserServiceBase(ServiceBase):
    async def list(self, list_user_request: "ListUserRequest") -> "ListUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get(self, get_user_request: "GetUserRequest") -> "GetUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create(
        self, create_user_request: "CreateUserRequest"
    ) -> "CreateUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update(
        self, update_user_request: "UpdateUserRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete(
        self, delete_user_request: "DeleteUserRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_password(
        self, update_user_password_request: "UpdateUserPasswordRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list(
        self, stream: "grpclib.server.Stream[ListUserRequest, ListUserResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list(request)
        await stream.send_message(response)

    async def __rpc_get(
        self, stream: "grpclib.server.Stream[GetUserRequest, GetUserResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get(request)
        await stream.send_message(response)

    async def __rpc_create(
        self, stream: "grpclib.server.Stream[CreateUserRequest, CreateUserResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create(request)
        await stream.send_message(response)

    async def __rpc_update(
        self,
        stream: "grpclib.server.Stream[UpdateUserRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update(request)
        await stream.send_message(response)

    async def __rpc_delete(
        self,
        stream: "grpclib.server.Stream[DeleteUserRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete(request)
        await stream.send_message(response)

    async def __rpc_update_password(
        self,
        stream: "grpclib.server.Stream[UpdateUserPasswordRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_password(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/api.UserService/List": grpclib.const.Handler(
                self.__rpc_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListUserRequest,
                ListUserResponse,
            ),
            "/api.UserService/Get": grpclib.const.Handler(
                self.__rpc_get,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetUserRequest,
                GetUserResponse,
            ),
            "/api.UserService/Create": grpclib.const.Handler(
                self.__rpc_create,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateUserRequest,
                CreateUserResponse,
            ),
            "/api.UserService/Update": grpclib.const.Handler(
                self.__rpc_update,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateUserRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/api.UserService/Delete": grpclib.const.Handler(
                self.__rpc_delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteUserRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/api.UserService/UpdatePassword": grpclib.const.Handler(
                self.__rpc_update_password,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateUserPasswordRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
        }
