# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: chirpstack-api/as_pb/integration/integration.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import (
    Dict,
    List,
)

import betterproto

from .. import (
    common as _common__,
    gw as _gw__,
)


class ErrorType(betterproto.Enum):
    UNKNOWN = 0
    """Unknown type."""

    DOWNLINK_PAYLOAD_SIZE = 1
    """
    Error related to the downlink payload size. Usually seen when the payload
    exceeded the maximum allowed payload size.
    """

    DOWNLINK_FCNT = 2
    """
    Error related to the downlink frame-counter. Usually seen when the frame-
    counter has already been used.
    """

    UPLINK_CODEC = 3
    """Uplink codec error."""

    DOWNLINK_CODEC = 4
    """Downlink codec error."""

    OTAA = 5
    """OTAA error."""

    UPLINK_FCNT_RESET = 6
    """Uplink frame-counter was reset."""

    UPLINK_MIC = 7
    """Uplink MIC error."""

    UPLINK_FCNT_RETRANSMISSION = 8
    """Uplink frame-counter retransmission."""

    DOWNLINK_GATEWAY = 9
    """Downlink gateway error."""


@dataclass(eq=False, repr=False)
class UplinkEvent(betterproto.Message):
    """
    UplinkEvent is the message sent when an uplink payload has been received.
    """

    application_id: int = betterproto.uint64_field(1)
    """Application ID."""

    application_name: str = betterproto.string_field(2)
    """Application name."""

    device_name: str = betterproto.string_field(3)
    """Device name."""

    dev_eui: bytes = betterproto.bytes_field(4)
    """Device EUI."""

    rx_info: List["_gw__.UplinkRxInfo"] = betterproto.message_field(5)
    """Receiving gateway RX info."""

    tx_info: "_gw__.UplinkTxInfo" = betterproto.message_field(6)
    """TX info."""

    adr: bool = betterproto.bool_field(7)
    """Device has ADR bit set."""

    dr: int = betterproto.uint32_field(8)
    """Data-rate."""

    f_cnt: int = betterproto.uint32_field(9)
    """Frame counter."""

    f_port: int = betterproto.uint32_field(10)
    """Frame port."""

    data: bytes = betterproto.bytes_field(11)
    """FRMPayload data."""

    object_json: str = betterproto.string_field(12)
    """
    JSON string containing the decoded object. Note that this is only set when
    a codec is configured in the Device Profile.
    """

    tags: Dict[str, str] = betterproto.map_field(
        13, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    """User-defined device tags."""

    confirmed_uplink: bool = betterproto.bool_field(14)
    """Uplink was of type confirmed."""

    dev_addr: bytes = betterproto.bytes_field(15)
    """Device address."""

    published_at: datetime = betterproto.message_field(16)
    """Published at timestamp."""

    device_profile_id: str = betterproto.string_field(17)
    """Device Profile UUID as string"""

    device_profile_name: str = betterproto.string_field(18)
    """Device Profile name"""


@dataclass(eq=False, repr=False)
class JoinEvent(betterproto.Message):
    """
    JoinEvent is the message sent when a device joined the network. Note that
    this is only sent after the first received uplink after the device
    (re)activation.
    """

    application_id: int = betterproto.uint64_field(1)
    """Application ID."""

    application_name: str = betterproto.string_field(2)
    """Application name."""

    device_name: str = betterproto.string_field(3)
    """Device name."""

    dev_eui: bytes = betterproto.bytes_field(4)
    """Device EUI."""

    dev_addr: bytes = betterproto.bytes_field(5)
    """Device address."""

    rx_info: List["_gw__.UplinkRxInfo"] = betterproto.message_field(6)
    """Receiving gateway RX info."""

    tx_info: "_gw__.UplinkTxInfo" = betterproto.message_field(7)
    """TX info."""

    dr: int = betterproto.uint32_field(8)
    """Data-rate."""

    tags: Dict[str, str] = betterproto.map_field(
        9, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    """User-defined device tags."""

    published_at: datetime = betterproto.message_field(10)
    """Published at timestamp."""


@dataclass(eq=False, repr=False)
class AckEvent(betterproto.Message):
    """
    AckEvent is the message sent when a confirmation on a confirmed downlink
    has been received -or- when the downlink timed out.
    """

    application_id: int = betterproto.uint64_field(1)
    """Application ID."""

    application_name: str = betterproto.string_field(2)
    """Application name."""

    device_name: str = betterproto.string_field(3)
    """Device name."""

    dev_eui: bytes = betterproto.bytes_field(4)
    """Device EUI."""

    acknowledged: bool = betterproto.bool_field(5)
    """Frame was acknowledged."""

    f_cnt: int = betterproto.uint32_field(6)
    """Downlink frame counter to which the acknowledgement relates."""

    tags: Dict[str, str] = betterproto.map_field(
        7, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    """User-defined device tags."""

    published_at: datetime = betterproto.message_field(8)
    """Published at timestamp."""


@dataclass(eq=False, repr=False)
class TxAckEvent(betterproto.Message):
    """
    TxAckEvent is the message sent when a downlink was acknowledged by the
    gateway for transmission. As a downlink can be scheduled in the future,
    this event does not confirm that the message has already been transmitted.
    """

    application_id: int = betterproto.uint64_field(1)
    """Application ID."""

    application_name: str = betterproto.string_field(2)
    """Application name."""

    device_name: str = betterproto.string_field(3)
    """Device name."""

    dev_eui: bytes = betterproto.bytes_field(4)
    """Device EUI."""

    f_cnt: int = betterproto.uint32_field(5)
    """Downlink frame-counter."""

    tags: Dict[str, str] = betterproto.map_field(
        6, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    """User-defined device tags."""

    gateway_id: bytes = betterproto.bytes_field(7)
    """Gateway ID."""

    tx_info: "_gw__.DownlinkTxInfo" = betterproto.message_field(8)
    """TX info."""

    published_at: datetime = betterproto.message_field(9)
    """Published at timestamp."""


@dataclass(eq=False, repr=False)
class ErrorEvent(betterproto.Message):
    """ErrorEvent is the message sent when an error occurred."""

    application_id: int = betterproto.uint64_field(1)
    """Application ID."""

    application_name: str = betterproto.string_field(2)
    """Application name."""

    device_name: str = betterproto.string_field(3)
    """Device name."""

    dev_eui: bytes = betterproto.bytes_field(4)
    """Device EUI."""

    type: "ErrorType" = betterproto.enum_field(5)
    """Error type."""

    error: str = betterproto.string_field(6)
    """Error message."""

    f_cnt: int = betterproto.uint32_field(7)
    """
    Downlink frame-counter (in case the downlink is related to a scheduled
    downlink).
    """

    tags: Dict[str, str] = betterproto.map_field(
        8, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    """User-defined device tags."""

    published_at: datetime = betterproto.message_field(9)
    """Published at timestamp."""


@dataclass(eq=False, repr=False)
class StatusEvent(betterproto.Message):
    """
    StatusEvent is the message sent when a device-status mac-command was sent
    by the device.
    """

    application_id: int = betterproto.uint64_field(1)
    """Application ID."""

    application_name: str = betterproto.string_field(2)
    """Application name."""

    device_name: str = betterproto.string_field(3)
    """Device name."""

    dev_eui: bytes = betterproto.bytes_field(4)
    """Device EUI."""

    margin: int = betterproto.int32_field(5)
    """
    The demodulation signal-to-noise ratio in dB for the last successfully
    received device-status request by the Network Server.
    """

    external_power_source: bool = betterproto.bool_field(6)
    """Device is connected to an external power source."""

    battery_level_unavailable: bool = betterproto.bool_field(7)
    """Battery level is not available."""

    battery_level: float = betterproto.float_field(8)
    """Battery level."""

    tags: Dict[str, str] = betterproto.map_field(
        9, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    """User-defined device tags."""

    published_at: datetime = betterproto.message_field(10)
    """Published at timestamp."""


@dataclass(eq=False, repr=False)
class LocationEvent(betterproto.Message):
    """
    LocationEvent is the message sent when a geolocation resolve was returned.
    """

    application_id: int = betterproto.uint64_field(1)
    """Application ID."""

    application_name: str = betterproto.string_field(2)
    """Application name."""

    device_name: str = betterproto.string_field(3)
    """Device name."""

    dev_eui: bytes = betterproto.bytes_field(4)
    """Device EUI."""

    location: "_common__.Location" = betterproto.message_field(5)
    """Location."""

    tags: Dict[str, str] = betterproto.map_field(
        6, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    """User-defined device tags."""

    uplink_ids: List[bytes] = betterproto.bytes_field(7)
    """
    Uplink IDs used for geolocation. This is set in case the geolocation is
    based on the uplink meta-data.
    """

    f_cnt: int = betterproto.uint32_field(8)
    """
    Frame counter (in case the geolocation is based on the payload). This is
    set in case the geolocation is based on the uplink payload content.
    """

    published_at: datetime = betterproto.message_field(9)
    """Published at timestamp."""


@dataclass(eq=False, repr=False)
class IntegrationEvent(betterproto.Message):
    """
    IntegrationEvent is the message that can be sent by an integration. It
    allows for sending events which are provided by an external integration
    which are "not native" to ChirpStack.
    """

    application_id: int = betterproto.uint64_field(1)
    """Application ID."""

    application_name: str = betterproto.string_field(2)
    """Application name."""

    device_name: str = betterproto.string_field(3)
    """Device name."""

    dev_eui: bytes = betterproto.bytes_field(4)
    """Device EUI."""

    tags: Dict[str, str] = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    """User-defined device tags."""

    integration_name: str = betterproto.string_field(6)
    """Integration name."""

    event_type: str = betterproto.string_field(7)
    """Event type."""

    object_json: str = betterproto.string_field(8)
    """JSON string containing the event object."""

    published_at: datetime = betterproto.message_field(9)
    """Published at timestamp."""
